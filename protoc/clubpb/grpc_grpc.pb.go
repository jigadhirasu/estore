// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: club/grpc.proto

package clubpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClubSystemClient is the client API for ClubSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClubSystemClient interface {
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
	CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*CreateClubResponse, error)
	UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*UpdateClubResponse, error)
	FindCluib(ctx context.Context, in *FindClubRequest, opts ...grpc.CallOption) (*FindClubResponse, error)
	CreateRank(ctx context.Context, in *CreateRankRequest, opts ...grpc.CallOption) (*CreateRankResponse, error)
	UpdateRank(ctx context.Context, in *UpdateRankRequest, opts ...grpc.CallOption) (*UpdateRankResponse, error)
	DeleteRank(ctx context.Context, in *DeleteRankRequest, opts ...grpc.CallOption) (*DeleteRankResponse, error)
	FindRank(ctx context.Context, in *FindRankRequest, opts ...grpc.CallOption) (*FindRankResponse, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...grpc.CallOption) (*FindCustomerResponse, error)
}

type clubSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewClubSystemClient(cc grpc.ClientConnInterface) ClubSystemClient {
	return &clubSystemClient{cc}
}

func (c *clubSystemClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) CreateClub(ctx context.Context, in *CreateClubRequest, opts ...grpc.CallOption) (*CreateClubResponse, error) {
	out := new(CreateClubResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/CreateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) UpdateClub(ctx context.Context, in *UpdateClubRequest, opts ...grpc.CallOption) (*UpdateClubResponse, error) {
	out := new(UpdateClubResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/UpdateClub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) FindCluib(ctx context.Context, in *FindClubRequest, opts ...grpc.CallOption) (*FindClubResponse, error) {
	out := new(FindClubResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/FindCluib", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) CreateRank(ctx context.Context, in *CreateRankRequest, opts ...grpc.CallOption) (*CreateRankResponse, error) {
	out := new(CreateRankResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/CreateRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) UpdateRank(ctx context.Context, in *UpdateRankRequest, opts ...grpc.CallOption) (*UpdateRankResponse, error) {
	out := new(UpdateRankResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/UpdateRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) DeleteRank(ctx context.Context, in *DeleteRankRequest, opts ...grpc.CallOption) (*DeleteRankResponse, error) {
	out := new(DeleteRankResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/DeleteRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) FindRank(ctx context.Context, in *FindRankRequest, opts ...grpc.CallOption) (*FindRankResponse, error) {
	out := new(FindRankResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/FindRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clubSystemClient) FindCustomer(ctx context.Context, in *FindCustomerRequest, opts ...grpc.CallOption) (*FindCustomerResponse, error) {
	out := new(FindCustomerResponse)
	err := c.cc.Invoke(ctx, "/club.ClubSystem/FindCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClubSystemServer is the server API for ClubSystem service.
// All implementations must embed UnimplementedClubSystemServer
// for forward compatibility
type ClubSystemServer interface {
	Ping(context.Context, *PingPong) (*PingPong, error)
	CreateClub(context.Context, *CreateClubRequest) (*CreateClubResponse, error)
	UpdateClub(context.Context, *UpdateClubRequest) (*UpdateClubResponse, error)
	FindCluib(context.Context, *FindClubRequest) (*FindClubResponse, error)
	CreateRank(context.Context, *CreateRankRequest) (*CreateRankResponse, error)
	UpdateRank(context.Context, *UpdateRankRequest) (*UpdateRankResponse, error)
	DeleteRank(context.Context, *DeleteRankRequest) (*DeleteRankResponse, error)
	FindRank(context.Context, *FindRankRequest) (*FindRankResponse, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	FindCustomer(context.Context, *FindCustomerRequest) (*FindCustomerResponse, error)
	mustEmbedUnimplementedClubSystemServer()
}

// UnimplementedClubSystemServer must be embedded to have forward compatible implementations.
type UnimplementedClubSystemServer struct {
}

func (UnimplementedClubSystemServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedClubSystemServer) CreateClub(context.Context, *CreateClubRequest) (*CreateClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClub not implemented")
}
func (UnimplementedClubSystemServer) UpdateClub(context.Context, *UpdateClubRequest) (*UpdateClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClub not implemented")
}
func (UnimplementedClubSystemServer) FindCluib(context.Context, *FindClubRequest) (*FindClubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCluib not implemented")
}
func (UnimplementedClubSystemServer) CreateRank(context.Context, *CreateRankRequest) (*CreateRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRank not implemented")
}
func (UnimplementedClubSystemServer) UpdateRank(context.Context, *UpdateRankRequest) (*UpdateRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRank not implemented")
}
func (UnimplementedClubSystemServer) DeleteRank(context.Context, *DeleteRankRequest) (*DeleteRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRank not implemented")
}
func (UnimplementedClubSystemServer) FindRank(context.Context, *FindRankRequest) (*FindRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRank not implemented")
}
func (UnimplementedClubSystemServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedClubSystemServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedClubSystemServer) FindCustomer(context.Context, *FindCustomerRequest) (*FindCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomer not implemented")
}
func (UnimplementedClubSystemServer) mustEmbedUnimplementedClubSystemServer() {}

// UnsafeClubSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClubSystemServer will
// result in compilation errors.
type UnsafeClubSystemServer interface {
	mustEmbedUnimplementedClubSystemServer()
}

func RegisterClubSystemServer(s grpc.ServiceRegistrar, srv ClubSystemServer) {
	s.RegisterService(&ClubSystem_ServiceDesc, srv)
}

func _ClubSystem_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_CreateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).CreateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/CreateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).CreateClub(ctx, req.(*CreateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_UpdateClub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).UpdateClub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/UpdateClub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).UpdateClub(ctx, req.(*UpdateClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_FindCluib_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindClubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).FindCluib(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/FindCluib",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).FindCluib(ctx, req.(*FindClubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_CreateRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).CreateRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/CreateRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).CreateRank(ctx, req.(*CreateRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_UpdateRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).UpdateRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/UpdateRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).UpdateRank(ctx, req.(*UpdateRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_DeleteRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).DeleteRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/DeleteRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).DeleteRank(ctx, req.(*DeleteRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_FindRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).FindRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/FindRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).FindRank(ctx, req.(*FindRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClubSystem_FindCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClubSystemServer).FindCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/club.ClubSystem/FindCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClubSystemServer).FindCustomer(ctx, req.(*FindCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClubSystem_ServiceDesc is the grpc.ServiceDesc for ClubSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClubSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "club.ClubSystem",
	HandlerType: (*ClubSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ClubSystem_Ping_Handler,
		},
		{
			MethodName: "CreateClub",
			Handler:    _ClubSystem_CreateClub_Handler,
		},
		{
			MethodName: "UpdateClub",
			Handler:    _ClubSystem_UpdateClub_Handler,
		},
		{
			MethodName: "FindCluib",
			Handler:    _ClubSystem_FindCluib_Handler,
		},
		{
			MethodName: "CreateRank",
			Handler:    _ClubSystem_CreateRank_Handler,
		},
		{
			MethodName: "UpdateRank",
			Handler:    _ClubSystem_UpdateRank_Handler,
		},
		{
			MethodName: "DeleteRank",
			Handler:    _ClubSystem_DeleteRank_Handler,
		},
		{
			MethodName: "FindRank",
			Handler:    _ClubSystem_FindRank_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _ClubSystem_CreateCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _ClubSystem_UpdateCustomer_Handler,
		},
		{
			MethodName: "FindCustomer",
			Handler:    _ClubSystem_FindCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "club/grpc.proto",
}
