// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: fs/grpc.proto

package fspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSystemClient is the client API for FileSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSystemClient interface {
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
	// 沒有傳base64的data代表是建立資料夾
	CreateDirFile(ctx context.Context, in *CreateOrUpdateDirFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateDirFileResponse, error)
	UpdateDirFile(ctx context.Context, in *CreateOrUpdateDirFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateDirFileResponse, error)
	CreateOrUpdateDirFile(ctx context.Context, in *CreateOrUpdateDirFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateDirFileResponse, error)
	DeleteDirFile(ctx context.Context, in *DeleteDirFileRequest, opts ...grpc.CallOption) (*DeleteDirFileResponse, error)
	FindDirFile(ctx context.Context, in *FindDirFileRequest, opts ...grpc.CallOption) (*FindDirFileResponse, error)
}

type fileSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSystemClient(cc grpc.ClientConnInterface) FileSystemClient {
	return &fileSystemClient{cc}
}

func (c *fileSystemClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, "/fs.FileSystem/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) CreateDirFile(ctx context.Context, in *CreateOrUpdateDirFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateDirFileResponse, error) {
	out := new(CreateOrUpdateDirFileResponse)
	err := c.cc.Invoke(ctx, "/fs.FileSystem/CreateDirFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) UpdateDirFile(ctx context.Context, in *CreateOrUpdateDirFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateDirFileResponse, error) {
	out := new(CreateOrUpdateDirFileResponse)
	err := c.cc.Invoke(ctx, "/fs.FileSystem/UpdateDirFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) CreateOrUpdateDirFile(ctx context.Context, in *CreateOrUpdateDirFileRequest, opts ...grpc.CallOption) (*CreateOrUpdateDirFileResponse, error) {
	out := new(CreateOrUpdateDirFileResponse)
	err := c.cc.Invoke(ctx, "/fs.FileSystem/CreateOrUpdateDirFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) DeleteDirFile(ctx context.Context, in *DeleteDirFileRequest, opts ...grpc.CallOption) (*DeleteDirFileResponse, error) {
	out := new(DeleteDirFileResponse)
	err := c.cc.Invoke(ctx, "/fs.FileSystem/DeleteDirFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileSystemClient) FindDirFile(ctx context.Context, in *FindDirFileRequest, opts ...grpc.CallOption) (*FindDirFileResponse, error) {
	out := new(FindDirFileResponse)
	err := c.cc.Invoke(ctx, "/fs.FileSystem/FindDirFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileSystemServer is the server API for FileSystem service.
// All implementations must embed UnimplementedFileSystemServer
// for forward compatibility
type FileSystemServer interface {
	Ping(context.Context, *PingPong) (*PingPong, error)
	// 沒有傳base64的data代表是建立資料夾
	CreateDirFile(context.Context, *CreateOrUpdateDirFileRequest) (*CreateOrUpdateDirFileResponse, error)
	UpdateDirFile(context.Context, *CreateOrUpdateDirFileRequest) (*CreateOrUpdateDirFileResponse, error)
	CreateOrUpdateDirFile(context.Context, *CreateOrUpdateDirFileRequest) (*CreateOrUpdateDirFileResponse, error)
	DeleteDirFile(context.Context, *DeleteDirFileRequest) (*DeleteDirFileResponse, error)
	FindDirFile(context.Context, *FindDirFileRequest) (*FindDirFileResponse, error)
	mustEmbedUnimplementedFileSystemServer()
}

// UnimplementedFileSystemServer must be embedded to have forward compatible implementations.
type UnimplementedFileSystemServer struct {
}

func (UnimplementedFileSystemServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileSystemServer) CreateDirFile(context.Context, *CreateOrUpdateDirFileRequest) (*CreateOrUpdateDirFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirFile not implemented")
}
func (UnimplementedFileSystemServer) UpdateDirFile(context.Context, *CreateOrUpdateDirFileRequest) (*CreateOrUpdateDirFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirFile not implemented")
}
func (UnimplementedFileSystemServer) CreateOrUpdateDirFile(context.Context, *CreateOrUpdateDirFileRequest) (*CreateOrUpdateDirFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateDirFile not implemented")
}
func (UnimplementedFileSystemServer) DeleteDirFile(context.Context, *DeleteDirFileRequest) (*DeleteDirFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirFile not implemented")
}
func (UnimplementedFileSystemServer) FindDirFile(context.Context, *FindDirFileRequest) (*FindDirFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDirFile not implemented")
}
func (UnimplementedFileSystemServer) mustEmbedUnimplementedFileSystemServer() {}

// UnsafeFileSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSystemServer will
// result in compilation errors.
type UnsafeFileSystemServer interface {
	mustEmbedUnimplementedFileSystemServer()
}

func RegisterFileSystemServer(s grpc.ServiceRegistrar, srv FileSystemServer) {
	s.RegisterService(&FileSystem_ServiceDesc, srv)
}

func _FileSystem_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileSystem/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_CreateDirFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateDirFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).CreateDirFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileSystem/CreateDirFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).CreateDirFile(ctx, req.(*CreateOrUpdateDirFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_UpdateDirFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateDirFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).UpdateDirFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileSystem/UpdateDirFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).UpdateDirFile(ctx, req.(*CreateOrUpdateDirFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_CreateOrUpdateDirFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateDirFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).CreateOrUpdateDirFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileSystem/CreateOrUpdateDirFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).CreateOrUpdateDirFile(ctx, req.(*CreateOrUpdateDirFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_DeleteDirFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).DeleteDirFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileSystem/DeleteDirFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).DeleteDirFile(ctx, req.(*DeleteDirFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileSystem_FindDirFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDirFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileSystemServer).FindDirFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fs.FileSystem/FindDirFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileSystemServer).FindDirFile(ctx, req.(*FindDirFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileSystem_ServiceDesc is the grpc.ServiceDesc for FileSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fs.FileSystem",
	HandlerType: (*FileSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FileSystem_Ping_Handler,
		},
		{
			MethodName: "CreateDirFile",
			Handler:    _FileSystem_CreateDirFile_Handler,
		},
		{
			MethodName: "UpdateDirFile",
			Handler:    _FileSystem_UpdateDirFile_Handler,
		},
		{
			MethodName: "CreateOrUpdateDirFile",
			Handler:    _FileSystem_CreateOrUpdateDirFile_Handler,
		},
		{
			MethodName: "DeleteDirFile",
			Handler:    _FileSystem_DeleteDirFile_Handler,
		},
		{
			MethodName: "FindDirFile",
			Handler:    _FileSystem_FindDirFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fs/grpc.proto",
}
