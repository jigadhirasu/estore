// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: stock/grpc.proto

package stockpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockSystemClient is the client API for StockSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockSystemClient interface {
	Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error)
	CreateCommodity(ctx context.Context, in *CreateCommodityRequest, opts ...grpc.CallOption) (*CreateCommodityResponse, error)
	UpdateCommodity(ctx context.Context, in *UpdateCommodityRequest, opts ...grpc.CallOption) (*UpdateCommodityResponse, error)
	FindCommodity(ctx context.Context, in *FindCommodityRequest, opts ...grpc.CallOption) (*FindCommodityResponse, error)
	CreateSpec(ctx context.Context, in *CreateSpecRequest, opts ...grpc.CallOption) (*CreateSpecResponse, error)
	UpdateSpec(ctx context.Context, in *UpdateSpecRequest, opts ...grpc.CallOption) (*UpdateSpecResponse, error)
	FindSpec(ctx context.Context, in *FindSpecRequest, opts ...grpc.CallOption) (*FindSpecResponse, error)
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error)
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error)
	DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error)
	FindSupplier(ctx context.Context, in *FindSupplierRequest, opts ...grpc.CallOption) (*FindSupplierResponse, error)
	CreateStorehouse(ctx context.Context, in *CreateStorehouseRequest, opts ...grpc.CallOption) (*CreateStorehouseResponse, error)
	UpdateStorehouse(ctx context.Context, in *UpdateStorehouseRequest, opts ...grpc.CallOption) (*UpdateStorehouseResponse, error)
	FindStorehouse(ctx context.Context, in *FindStorehouseRequest, opts ...grpc.CallOption) (*FindStorehouseResponse, error)
	CreatePurchase(ctx context.Context, in *CreatePurchaseRequest, opts ...grpc.CallOption) (*CreatePurchaseResponse, error)
	UpdatePurchase(ctx context.Context, in *UpdatePurchaseRequest, opts ...grpc.CallOption) (*UpdatePurchaseResponse, error)
	FindPurchase(ctx context.Context, in *FindPurchaseRequest, opts ...grpc.CallOption) (*FindPurchaseResponse, error)
	UpdateInventory(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*UpdateInventoryResponse, error)
	FindInventory(ctx context.Context, in *FindInventoryRequest, opts ...grpc.CallOption) (*FindInventoryResponse, error)
}

type stockSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewStockSystemClient(cc grpc.ClientConnInterface) StockSystemClient {
	return &stockSystemClient{cc}
}

func (c *stockSystemClient) Ping(ctx context.Context, in *PingPong, opts ...grpc.CallOption) (*PingPong, error) {
	out := new(PingPong)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) CreateCommodity(ctx context.Context, in *CreateCommodityRequest, opts ...grpc.CallOption) (*CreateCommodityResponse, error) {
	out := new(CreateCommodityResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/CreateCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) UpdateCommodity(ctx context.Context, in *UpdateCommodityRequest, opts ...grpc.CallOption) (*UpdateCommodityResponse, error) {
	out := new(UpdateCommodityResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/UpdateCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) FindCommodity(ctx context.Context, in *FindCommodityRequest, opts ...grpc.CallOption) (*FindCommodityResponse, error) {
	out := new(FindCommodityResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/FindCommodity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) CreateSpec(ctx context.Context, in *CreateSpecRequest, opts ...grpc.CallOption) (*CreateSpecResponse, error) {
	out := new(CreateSpecResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/CreateSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) UpdateSpec(ctx context.Context, in *UpdateSpecRequest, opts ...grpc.CallOption) (*UpdateSpecResponse, error) {
	out := new(UpdateSpecResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/UpdateSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) FindSpec(ctx context.Context, in *FindSpecRequest, opts ...grpc.CallOption) (*FindSpecResponse, error) {
	out := new(FindSpecResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/FindSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*CreateSupplierResponse, error) {
	out := new(CreateSupplierResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/CreateSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*UpdateSupplierResponse, error) {
	out := new(UpdateSupplierResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/UpdateSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) DeleteSupplier(ctx context.Context, in *DeleteSupplierRequest, opts ...grpc.CallOption) (*DeleteSupplierResponse, error) {
	out := new(DeleteSupplierResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/DeleteSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) FindSupplier(ctx context.Context, in *FindSupplierRequest, opts ...grpc.CallOption) (*FindSupplierResponse, error) {
	out := new(FindSupplierResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/FindSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) CreateStorehouse(ctx context.Context, in *CreateStorehouseRequest, opts ...grpc.CallOption) (*CreateStorehouseResponse, error) {
	out := new(CreateStorehouseResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/CreateStorehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) UpdateStorehouse(ctx context.Context, in *UpdateStorehouseRequest, opts ...grpc.CallOption) (*UpdateStorehouseResponse, error) {
	out := new(UpdateStorehouseResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/UpdateStorehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) FindStorehouse(ctx context.Context, in *FindStorehouseRequest, opts ...grpc.CallOption) (*FindStorehouseResponse, error) {
	out := new(FindStorehouseResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/FindStorehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) CreatePurchase(ctx context.Context, in *CreatePurchaseRequest, opts ...grpc.CallOption) (*CreatePurchaseResponse, error) {
	out := new(CreatePurchaseResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/CreatePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) UpdatePurchase(ctx context.Context, in *UpdatePurchaseRequest, opts ...grpc.CallOption) (*UpdatePurchaseResponse, error) {
	out := new(UpdatePurchaseResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/UpdatePurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) FindPurchase(ctx context.Context, in *FindPurchaseRequest, opts ...grpc.CallOption) (*FindPurchaseResponse, error) {
	out := new(FindPurchaseResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/FindPurchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) UpdateInventory(ctx context.Context, in *UpdateInventoryRequest, opts ...grpc.CallOption) (*UpdateInventoryResponse, error) {
	out := new(UpdateInventoryResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/UpdateInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockSystemClient) FindInventory(ctx context.Context, in *FindInventoryRequest, opts ...grpc.CallOption) (*FindInventoryResponse, error) {
	out := new(FindInventoryResponse)
	err := c.cc.Invoke(ctx, "/stock.StockSystem/FindInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockSystemServer is the server API for StockSystem service.
// All implementations must embed UnimplementedStockSystemServer
// for forward compatibility
type StockSystemServer interface {
	Ping(context.Context, *PingPong) (*PingPong, error)
	CreateCommodity(context.Context, *CreateCommodityRequest) (*CreateCommodityResponse, error)
	UpdateCommodity(context.Context, *UpdateCommodityRequest) (*UpdateCommodityResponse, error)
	FindCommodity(context.Context, *FindCommodityRequest) (*FindCommodityResponse, error)
	CreateSpec(context.Context, *CreateSpecRequest) (*CreateSpecResponse, error)
	UpdateSpec(context.Context, *UpdateSpecRequest) (*UpdateSpecResponse, error)
	FindSpec(context.Context, *FindSpecRequest) (*FindSpecResponse, error)
	CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error)
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error)
	DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error)
	FindSupplier(context.Context, *FindSupplierRequest) (*FindSupplierResponse, error)
	CreateStorehouse(context.Context, *CreateStorehouseRequest) (*CreateStorehouseResponse, error)
	UpdateStorehouse(context.Context, *UpdateStorehouseRequest) (*UpdateStorehouseResponse, error)
	FindStorehouse(context.Context, *FindStorehouseRequest) (*FindStorehouseResponse, error)
	CreatePurchase(context.Context, *CreatePurchaseRequest) (*CreatePurchaseResponse, error)
	UpdatePurchase(context.Context, *UpdatePurchaseRequest) (*UpdatePurchaseResponse, error)
	FindPurchase(context.Context, *FindPurchaseRequest) (*FindPurchaseResponse, error)
	UpdateInventory(context.Context, *UpdateInventoryRequest) (*UpdateInventoryResponse, error)
	FindInventory(context.Context, *FindInventoryRequest) (*FindInventoryResponse, error)
	mustEmbedUnimplementedStockSystemServer()
}

// UnimplementedStockSystemServer must be embedded to have forward compatible implementations.
type UnimplementedStockSystemServer struct {
}

func (UnimplementedStockSystemServer) Ping(context.Context, *PingPong) (*PingPong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStockSystemServer) CreateCommodity(context.Context, *CreateCommodityRequest) (*CreateCommodityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommodity not implemented")
}
func (UnimplementedStockSystemServer) UpdateCommodity(context.Context, *UpdateCommodityRequest) (*UpdateCommodityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommodity not implemented")
}
func (UnimplementedStockSystemServer) FindCommodity(context.Context, *FindCommodityRequest) (*FindCommodityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCommodity not implemented")
}
func (UnimplementedStockSystemServer) CreateSpec(context.Context, *CreateSpecRequest) (*CreateSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpec not implemented")
}
func (UnimplementedStockSystemServer) UpdateSpec(context.Context, *UpdateSpecRequest) (*UpdateSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpec not implemented")
}
func (UnimplementedStockSystemServer) FindSpec(context.Context, *FindSpecRequest) (*FindSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSpec not implemented")
}
func (UnimplementedStockSystemServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*CreateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedStockSystemServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*UpdateSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedStockSystemServer) DeleteSupplier(context.Context, *DeleteSupplierRequest) (*DeleteSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplier not implemented")
}
func (UnimplementedStockSystemServer) FindSupplier(context.Context, *FindSupplierRequest) (*FindSupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSupplier not implemented")
}
func (UnimplementedStockSystemServer) CreateStorehouse(context.Context, *CreateStorehouseRequest) (*CreateStorehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorehouse not implemented")
}
func (UnimplementedStockSystemServer) UpdateStorehouse(context.Context, *UpdateStorehouseRequest) (*UpdateStorehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorehouse not implemented")
}
func (UnimplementedStockSystemServer) FindStorehouse(context.Context, *FindStorehouseRequest) (*FindStorehouseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStorehouse not implemented")
}
func (UnimplementedStockSystemServer) CreatePurchase(context.Context, *CreatePurchaseRequest) (*CreatePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchase not implemented")
}
func (UnimplementedStockSystemServer) UpdatePurchase(context.Context, *UpdatePurchaseRequest) (*UpdatePurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchase not implemented")
}
func (UnimplementedStockSystemServer) FindPurchase(context.Context, *FindPurchaseRequest) (*FindPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPurchase not implemented")
}
func (UnimplementedStockSystemServer) UpdateInventory(context.Context, *UpdateInventoryRequest) (*UpdateInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInventory not implemented")
}
func (UnimplementedStockSystemServer) FindInventory(context.Context, *FindInventoryRequest) (*FindInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindInventory not implemented")
}
func (UnimplementedStockSystemServer) mustEmbedUnimplementedStockSystemServer() {}

// UnsafeStockSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockSystemServer will
// result in compilation errors.
type UnsafeStockSystemServer interface {
	mustEmbedUnimplementedStockSystemServer()
}

func RegisterStockSystemServer(s grpc.ServiceRegistrar, srv StockSystemServer) {
	s.RegisterService(&StockSystem_ServiceDesc, srv)
}

func _StockSystem_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingPong)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).Ping(ctx, req.(*PingPong))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_CreateCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommodityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).CreateCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/CreateCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).CreateCommodity(ctx, req.(*CreateCommodityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_UpdateCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommodityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).UpdateCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/UpdateCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).UpdateCommodity(ctx, req.(*UpdateCommodityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_FindCommodity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCommodityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).FindCommodity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/FindCommodity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).FindCommodity(ctx, req.(*FindCommodityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_CreateSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).CreateSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/CreateSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).CreateSpec(ctx, req.(*CreateSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_UpdateSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).UpdateSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/UpdateSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).UpdateSpec(ctx, req.(*UpdateSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_FindSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).FindSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/FindSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).FindSpec(ctx, req.(*FindSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/CreateSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/UpdateSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_DeleteSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).DeleteSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/DeleteSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).DeleteSupplier(ctx, req.(*DeleteSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_FindSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).FindSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/FindSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).FindSupplier(ctx, req.(*FindSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_CreateStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).CreateStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/CreateStorehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).CreateStorehouse(ctx, req.(*CreateStorehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_UpdateStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).UpdateStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/UpdateStorehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).UpdateStorehouse(ctx, req.(*UpdateStorehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_FindStorehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStorehouseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).FindStorehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/FindStorehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).FindStorehouse(ctx, req.(*FindStorehouseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_CreatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).CreatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/CreatePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).CreatePurchase(ctx, req.(*CreatePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_UpdatePurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).UpdatePurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/UpdatePurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).UpdatePurchase(ctx, req.(*UpdatePurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_FindPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).FindPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/FindPurchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).FindPurchase(ctx, req.(*FindPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_UpdateInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).UpdateInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/UpdateInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).UpdateInventory(ctx, req.(*UpdateInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockSystem_FindInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockSystemServer).FindInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.StockSystem/FindInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockSystemServer).FindInventory(ctx, req.(*FindInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockSystem_ServiceDesc is the grpc.ServiceDesc for StockSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.StockSystem",
	HandlerType: (*StockSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StockSystem_Ping_Handler,
		},
		{
			MethodName: "CreateCommodity",
			Handler:    _StockSystem_CreateCommodity_Handler,
		},
		{
			MethodName: "UpdateCommodity",
			Handler:    _StockSystem_UpdateCommodity_Handler,
		},
		{
			MethodName: "FindCommodity",
			Handler:    _StockSystem_FindCommodity_Handler,
		},
		{
			MethodName: "CreateSpec",
			Handler:    _StockSystem_CreateSpec_Handler,
		},
		{
			MethodName: "UpdateSpec",
			Handler:    _StockSystem_UpdateSpec_Handler,
		},
		{
			MethodName: "FindSpec",
			Handler:    _StockSystem_FindSpec_Handler,
		},
		{
			MethodName: "CreateSupplier",
			Handler:    _StockSystem_CreateSupplier_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _StockSystem_UpdateSupplier_Handler,
		},
		{
			MethodName: "DeleteSupplier",
			Handler:    _StockSystem_DeleteSupplier_Handler,
		},
		{
			MethodName: "FindSupplier",
			Handler:    _StockSystem_FindSupplier_Handler,
		},
		{
			MethodName: "CreateStorehouse",
			Handler:    _StockSystem_CreateStorehouse_Handler,
		},
		{
			MethodName: "UpdateStorehouse",
			Handler:    _StockSystem_UpdateStorehouse_Handler,
		},
		{
			MethodName: "FindStorehouse",
			Handler:    _StockSystem_FindStorehouse_Handler,
		},
		{
			MethodName: "CreatePurchase",
			Handler:    _StockSystem_CreatePurchase_Handler,
		},
		{
			MethodName: "UpdatePurchase",
			Handler:    _StockSystem_UpdatePurchase_Handler,
		},
		{
			MethodName: "FindPurchase",
			Handler:    _StockSystem_FindPurchase_Handler,
		},
		{
			MethodName: "UpdateInventory",
			Handler:    _StockSystem_UpdateInventory_Handler,
		},
		{
			MethodName: "FindInventory",
			Handler:    _StockSystem_FindInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stock/grpc.proto",
}
